import pygame
import sys
import random
import math
from pygame.locals import *

# 初始化pygame
pygame.init()
pygame.font.init()

# 屏幕设置
SCREEN_WIDTH, SCREEN_HEIGHT = 1000, 700
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("垄断者：经济学模拟游戏")

# 颜色定义
BACKGROUND = (25, 30, 45)
PANEL_BG = (40, 50, 70)
ACCENT = (70, 130, 180)
HIGHLIGHT = (100, 180, 255)
SUCCESS = (100, 200, 150)
WARNING = (220, 160, 80)
DANGER = (220, 100, 100)
TEXT_COLOR = (240, 240, 240)
GRAPH_BG = (30, 35, 55)
GRAPH_LINE = (80, 100, 130)

# 字体
title_font = pygame.font.SysFont("simhei", 48, bold=True)
header_font = pygame.font.SysFont("simhei", 32, bold=True)
main_font = pygame.font.SysFont("simhei", 24)
small_font = pygame.font.SysFont("simhei", 20)

class MonopolyGame:
    def __init__(self):
        self.reset_game()
        
    def reset_game(self):
        self.round = 1
        self.max_rounds = 10
        self.cash = 1000000  # 初始资金
        self.profit = 0
        self.market_share = 75  # 市场份额百分比
        self.production_cost = 35
        self.price = 100  # 初始价格
        self.demand = 10000  # 初始需求
        self.antitrust_pressure = 20  # 反垄断压力
        self.status = "running"
        self.history = []
        self.record_history()
        
    def record_history(self):
        # 记录当前状态
        self.history.append({
            "round": self.round,
            "cash": self.cash,
            "profit": self.profit,
            "market_share": self.market_share,
            "price": self.price,
            "demand": self.demand,
            "antitrust": self.antitrust_pressure
        })
    
    def set_price(self, new_price):
        self.price = max(40, min(200, new_price))  # 限制价格范围
        
    def adjust_production_cost(self, change):
        self.production_cost = max(20, min(60, self.production_cost + change))
        
    def calculate_demand(self):
        # 需求受价格影响（价格弹性）
        price_factor = max(0.3, 1.0 - (self.price - 80) * 0.01)
        # 需求受市场份额影响
        share_factor = self.market_share / 100.0
        # 随机波动
        random_factor = random.uniform(0.95, 1.05)
        
        self.demand = int(10000 * price_factor * share_factor * random_factor)
        return self.demand
    
    def calculate_profit(self):
        # 利润 = (价格 - 生产成本) * 需求
        self.profit = int((self.price - self.production_cost) * self.demand)
        return self.profit
    
    def update_antitrust_pressure(self):
        # 反垄断压力受价格和市场份额影响
        price_factor = max(0, (self.price - 80) * 0.5)
        share_factor = max(0, (self.market_share - 60) * 0.8)
        # 随机波动
        random_factor = random.uniform(0.9, 1.2)
        
        pressure_increase = (price_factor + share_factor) * random_factor
        self.antitrust_pressure = min(100, self.antitrust_pressure + pressure_increase)
        return self.antitrust_pressure
    
    def antitrust_action(self):
        # 反垄断机构行动
        if self.antitrust_pressure > 70:
            # 高概率采取行动
            action_prob = min(0.9, (self.antitrust_pressure - 70) / 30)
            if random.random() < action_prob:
                # 罚款
                fine = int(self.cash * random.uniform(0.05, 0.15))
                self.cash -= fine
                
                # 强制拆分市场份额
                share_loss = random.uniform(5, 15)
                self.market_share = max(30, self.market_share - share_loss)
                
                # 降低反垄断压力
                self.antitrust_pressure *= 0.6
                
                return {
                    "action": True,
                    "fine": fine,
                    "share_loss": share_loss
                }
        
        return {"action": False}
    
    def next_round(self):
        if self.status != "running":
            return
        
        # 计算需求
        self.calculate_demand()
        
        # 计算利润
        self.calculate_profit()
        
        # 更新资金
        self.cash += self.profit
        
        # 更新反垄断压力
        self.update_antitrust_pressure()
        
        # 反垄断机构行动
        action_result = self.antitrust_action()
        
        # 检查破产
        if self.cash <= 0:
            self.status = "bankrupt"
        
        # 进入下一轮
        if self.round < self.max_rounds and self.status == "running":
            self.round += 1
            self.record_history()
        
        # 检查游戏结束
        if self.round == self.max_rounds and self.status == "running":
            self.status = "success"
            
        return action_result

# 创建游戏实例
game = MonopolyGame()

# 按钮类
class Button:
    def __init__(self, x, y, width, height, text, color=ACCENT, hover_color=HIGHLIGHT):
        self.rect = pygame.Rect(x, y, width, height)
        self.color = color
        self.hover_color = hover_color
        self.text = text
        self.is_hovered = False
        
    def draw(self, surface):
        color = self.hover_color if self.is_hovered else self.color
        pygame.draw.rect(surface, color, self.rect, border_radius=8)
        pygame.draw.rect(surface, TEXT_COLOR, self.rect, 2, border_radius=8)
        
        text_surf = main_font.render(self.text, True, TEXT_COLOR)
        text_rect = text_surf.get_rect(center=self.rect.center)
        surface.blit(text_surf, text_rect)
        
    def check_hover(self, pos):
        self.is_hovered = self.rect.collidepoint(pos)
        return self.is_hovered
        
    def handle_event(self, event):
        if event.type == MOUSEBUTTONDOWN and event.button == 1:
            if self.is_hovered:
                return True
        return False

# 滑块类
class Slider:
    def __init__(self, x, y, width, min_val, max_val, initial_val, label):
        self.rect = pygame.Rect(x, y, width, 30)
        self.min_val = min_val
        self.max_val = max_val
        self.value = initial_val
        self.label = label
        self.dragging = False
        self.knob_radius = 15
        self.knob_x = x + (initial_val - min_val) / (max_val - min_val) * width
        
    def draw(self, surface):
        # 绘制滑块轨道
        pygame.draw.rect(surface, PANEL_BG, self.rect, border_radius=5)
        pygame.draw.rect(surface, TEXT_COLOR, self.rect, 2, border_radius=5)
        
        # 绘制填充部分
        fill_width = (self.value - self.min_val) / (self.max_val - self.min_val) * self.rect.width
        fill_rect = pygame.Rect(self.rect.x, self.rect.y, fill_width, self.rect.height)
        pygame.draw.rect(surface, ACCENT, fill_rect, border_radius=5)
        
        # 绘制滑块旋钮
        knob_pos = (self.knob_x, self.rect.centery)
        pygame.draw.circle(surface, HIGHLIGHT, knob_pos, self.knob_radius)
        pygame.draw.circle(surface, TEXT_COLOR, knob_pos, self.knob_radius, 2)
        
        # 绘制标签和数值
        label_surf = small_font.render(f"{self.label}: {int(self.value)}", True, TEXT_COLOR)
        surface.blit(label_surf, (self.rect.x, self.rect.y - 30))
        
    def handle_event(self, event):
        if event.type == MOUSEBUTTONDOWN and event.button == 1:
            if pygame.Rect(self.knob_x - self.knob_radius, self.rect.y - self.knob_radius, 
                           self.knob_radius * 2, self.rect.height + self.knob_radius * 2).collidepoint(event.pos):
                self.dragging = True
                
        elif event.type == MOUSEBUTTONUP and event.button == 1:
            self.dragging = False
            
        elif event.type == MOUSEMOTION and self.dragging:
            self.knob_x = max(self.rect.left, min(self.rect.right, event.pos[0]))
            self.value = self.min_val + (self.knob_x - self.rect.left) / self.rect.width * (self.max_val - self.min_val)
            
        return self.value

# 创建UI元素
price_slider = Slider(350, 470, 300, 40, 200, game.price, "产品定价")
cost_button_up = Button(700, 470, 150, 40, "↑ 生产成本", WARNING)
cost_button_down = Button(700, 520, 150, 40, "↓ 生产成本", SUCCESS)
next_round_button = Button(350, 570, 300, 60, "进入下一轮", ACCENT)
restart_button = Button(700, 570, 150, 60, "重新开始", SUCCESS)

# 绘制函数
def draw_game_info():
    # 绘制标题
    title_surf = title_font.render("垄断者：经济学模拟游戏", True, TEXT_COLOR)
    screen.blit(title_surf, (SCREEN_WIDTH // 2 - title_surf.get_width() // 2, 20))
    
    # 绘制副标题
    subtitle = "在10轮内维持垄断地位，避免破产"
    subtitle_surf = main_font.render(subtitle, True, HIGHLIGHT)
    screen.blit(subtitle_surf, (SCREEN_WIDTH // 2 - subtitle_surf.get_width() // 2, 80))
    
    # 绘制状态面板
    pygame.draw.rect(screen, PANEL_BG, (50, 120, 900, 150), border_radius=12)
    pygame.draw.rect(screen, TEXT_COLOR, (50, 120, 900, 150), 2, border_radius=12)
    
    # 绘制状态信息
    status_color = SUCCESS if game.status == "running" else DANGER if game.status == "bankrupt" else HIGHLIGHT
    status_text = "进行中" if game.status == "running" else "已破产！" if game.status == "bankrupt" else "挑战成功！"
    status_surf = header_font.render(f"第 {game.round}/10 轮 - 状态: {status_text}", True, status_color)
    screen.blit(status_surf, (70, 140))
    
    # 绘制关键指标
    cash_surf = main_font.render(f"资金: ${game.cash:,}", True, TEXT_COLOR)
    profit_surf = main_font.render(f"利润: ${game.profit:,}", True, 
                                 SUCCESS if game.profit >= 0 else DANGER)
    share_surf = main_font.render(f"市场份额: {game.market_share:.1f}%", True, TEXT_COLOR)
    antitrust_surf = main_font.render(f"反垄断压力: {game.antitrust_pressure:.1f}/100", True, 
                                    DANGER if game.antitrust_pressure > 70 else WARNING if game.antitrust_pressure > 50 else TEXT_COLOR)
    
    screen.blit(cash_surf, (70, 190))
    screen.blit(profit_surf, (300, 190))
    screen.blit(share_surf, (500, 190))
    screen.blit(antitrust_surf, (700, 190))
    
    # 绘制经济学原理说明
    pygame.draw.rect(screen, PANEL_BG, (50, 290, 900, 100), border_radius=12)
    pygame.draw.rect(screen, TEXT_COLOR, (50, 290, 900, 100), 2, border_radius=12)
    
    principles = [
        "经济学原理：垄断企业通过控制价格获取超额利润，但可能面临政府反垄断干预",
        "高价格带来高利润，但会降低需求并增加反垄断压力",
        "高市场份额增加反垄断风险，低市场份额减少利润"
    ]
    
    for i, principle in enumerate(principles):
        text_surf = small_font.render(principle, True, HIGHLIGHT)
        screen.blit(text_surf, (70, 310 + i * 25))

def draw_control_panel():
    # 绘制控制面板标题
    control_title = main_font.render("垄断者决策控制", True, HIGHLIGHT)
    screen.blit(control_title, (50, 410))
    
    # 绘制控制面板
    pygame.draw.rect(screen, PANEL_BG, (50, 440, 900, 150), border_radius=12)
    pygame.draw.rect(screen, TEXT_COLOR, (50, 440, 900, 150), 2, border_radius=12)
    
    # 不再绘制文字说明
    
    # 绘制UI元素
    price_slider.draw(screen)
    cost_button_up.draw(screen)
    cost_button_down.draw(screen)
    next_round_button.draw(screen)
    restart_button.draw(screen)

def draw_antitrust_info(action_result):
    # 绘制反垄断信息面板
    pygame.draw.rect(screen, PANEL_BG, (50, 290, 900, 100), border_radius=12)
    pygame.draw.rect(screen, TEXT_COLOR, (50, 290, 900, 100), 2, border_radius=12)
    
    if action_result.get("action", False):
        action_text = [
            "反垄断机构采取了行动！",
            f"罚款: ${action_result['fine']:,}",
            f"市场份额减少: {action_result['share_loss']:.1f}%"
        ]
        color = DANGER
    else:
        action_text = ["反垄断机构未采取行动"]
        color = SUCCESS if game.antitrust_pressure < 50 else WARNING
    
    for i, text in enumerate(action_text):
        text_surf = main_font.render(text, True, color)
        screen.blit(text_surf, (SCREEN_WIDTH // 2 - text_surf.get_width() // 2, 310 + i * 30))

def draw_graph():
    # 绘制图表背景
    pygame.draw.rect(screen, GRAPH_BG, (50, 290, 900, 100), border_radius=12)
    pygame.draw.rect(screen, TEXT_COLOR, (50, 290, 900, 100), 2, border_radius=12)
    
    # 图表标题
    graph_title = main_font.render("关键指标变化趋势", True, HIGHLIGHT)
    screen.blit(graph_title, (SCREEN_WIDTH // 2 - graph_title.get_width() // 2, 300))
    
    # 只绘制最近10轮数据
    start_idx = max(0, len(game.history) - 10)
    visible_history = game.history[start_idx:]
    
    if len(visible_history) < 2:
        return
    
    # 绘制网格线
    for i in range(1, 5):
        y_pos = 340 + i * 20
        pygame.draw.line(screen, GRAPH_LINE, (100, y_pos), (850, y_pos), 1)
    
    # 绘制数据点
    max_price = max(entry["price"] for entry in visible_history)
    min_price = min(entry["price"] for entry in visible_history)
    max_antitrust = max(entry["antitrust"] for entry in visible_history)
    
    # 绘制价格曲线
    points = []
    for i, entry in enumerate(visible_history):
        x = 100 + i * (750 / (len(visible_history) - 1))
        y = 380 - (entry["price"] - min_price) / (max_price - min_price + 1) * 60
        points.append((x, y))
    
    if len(points) > 1:
        pygame.draw.lines(screen, SUCCESS, False, points, 3)
    
    # 绘制反垄断压力曲线
    points = []
    for i, entry in enumerate(visible_history):
        x = 100 + i * (750 / (len(visible_history) - 1))
        y = 380 - entry["antitrust"] / max(1, max_antitrust) * 60
        points.append((x, y))
    
    if len(points) > 1:
        pygame.draw.lines(screen, DANGER, False, points, 3)
    
    # 绘制图例
    price_legend = small_font.render("价格", True, SUCCESS)
    antitrust_legend = small_font.render("反垄断压力", True, DANGER)
    screen.blit(price_legend, (870, 330))
    screen.blit(antitrust_legend, (870, 360))

# 绘制结果界面
def draw_result_screen():
    screen.fill(BACKGROUND)
    
    if game.status == "bankrupt":
        result_text = "垄断失败！"
        result_color = DANGER
        reason = "你的公司因反垄断行动而破产"
    else:
        result_text = "垄断成功！"
        result_color = SUCCESS
        reason = "你成功维持了10轮垄断地位"
    
    # 绘制结果标题
    title_surf = title_font.render(result_text, True, result_color)
    screen.blit(title_surf, (SCREEN_WIDTH // 2 - title_surf.get_width() // 2, 150))
    
    # 绘制原因
    reason_surf = header_font.render(reason, True, HIGHLIGHT)
    screen.blit(reason_surf, (SCREEN_WIDTH // 2 - reason_surf.get_width() // 2, 230))
    
    # 绘制最终数据
    pygame.draw.rect(screen, PANEL_BG, (200, 300, 600, 200), border_radius=12)
    pygame.draw.rect(screen, TEXT_COLOR, (200, 300, 600, 200), 2, border_radius=12)
    
    final_cash = main_font.render(f"最终资金: ${game.cash:,}", True, 
                                SUCCESS if game.cash > 0 else DANGER)
    avg_profit = main_font.render(f"平均每轮利润: ${sum(entry['profit'] for entry in game.history) // len(game.history):,}", True, TEXT_COLOR)
    final_share = main_font.render(f"最终市场份额: {game.market_share:.1f}%", True, TEXT_COLOR)
    
    screen.blit(final_cash, (SCREEN_WIDTH // 2 - final_cash.get_width() // 2, 330))
    screen.blit(avg_profit, (SCREEN_WIDTH // 2 - avg_profit.get_width() // 2, 370))
    screen.blit(final_share, (SCREEN_WIDTH // 2 - final_share.get_width() // 2, 410))
    
    # 绘制重新开始按钮
    restart_button.draw(screen)
    
    # 绘制退出游戏提示
    exit_text = small_font.render("按ESC键退出游戏", True, HIGHLIGHT)
    screen.blit(exit_text, (SCREEN_WIDTH // 2 - exit_text.get_width() // 2, 550))

# 主游戏循环
clock = pygame.time.Clock()
action_result = {}
show_antitrust_info = False
antitrust_info_timer = 0

running = True
while running:
    mouse_pos = pygame.mouse.get_pos()
    
    for event in pygame.event.get():
        if event.type == QUIT:
            running = False
            
        if event.type == KEYDOWN:
            if event.key == K_ESCAPE:
                running = False
            elif event.key == K_r:
                game.reset_game()
                action_result = {}
                show_antitrust_info = False
        
        if game.status == "running":
            # 处理滑块事件
            new_price = price_slider.handle_event(event)
            game.set_price(new_price)
            
            # 处理按钮事件
            if cost_button_up.handle_event(event):
                game.adjust_production_cost(2)
            if cost_button_down.handle_event(event):
                game.adjust_production_cost(-2)
                
            if next_round_button.handle_event(event):
                action_result = game.next_round()
                show_antitrust_info = True
                antitrust_info_timer = 180  # 显示3秒（60帧/秒）
            
        if restart_button.handle_event(event):
            game.reset_game()
            action_result = {}
            show_antitrust_info = False
    
    # 更新UI状态
    cost_button_up.check_hover(mouse_pos)
    cost_button_down.check_hover(mouse_pos)
    next_round_button.check_hover(mouse_pos)
    restart_button.check_hover(mouse_pos)
    
    # 绘制游戏界面
    screen.fill(BACKGROUND)
    
    if game.status in ["bankrupt", "success"]:
        draw_result_screen()
    else:
        draw_game_info()
        
        if show_antitrust_info:
            draw_antitrust_info(action_result)
            antitrust_info_timer -= 1
            if antitrust_info_timer <= 0:
                show_antitrust_info = False
        else:
            draw_graph()
        
        draw_control_panel()
    
    pygame.display.flip()
    clock.tick(60)

pygame.quit()
sys.exit()

#代码和游戏说明：
